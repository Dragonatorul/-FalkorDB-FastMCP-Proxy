---
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.10"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    services:
      falkordb:
        image: falkordb/falkordb:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      falkordb-mcp-server:
        image: ghcr.io/dragonatorul/falkordb-mcpserver:1.1.0
        ports:
          - 3000:3000
        env:
          FALKORDB_HOST: localhost
          MCP_API_KEY: dev-api-key
          ENABLE_MULTI_TENANCY: false
        options: >-
          --health-cmd "curl -f http://localhost:3000/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/ci.txt

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Security check with bandit
        run: |
          bandit -r src/ --skip B104,B101,B601

      - name: Check code formatting
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/

      - name: Type check with mypy (allowed to fail)
        continue-on-error: true
        run: |
          mypy src/

      - name: Test with pytest
        env:
          FALKORDB_MCPSERVER_URL: http://localhost:3000
          MCP_API_KEY: dev-api-key
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/ci.txt

      - name: Run security audit
        run: |
          pip-audit -r requirements/base.txt

      - name: Run safety check
        run: |
          safety check -r requirements/base.txt

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t falkordb-fastmcp-proxy:test .

      - name: Test Docker image
        run: |
          docker run --rm falkordb-fastmcp-proxy:test python -c "import src.fastmcp_proxy; print('Import successful')"

  integration:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          sleep 30

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run integration tests
        run: |
          python tests/test_remote_mcp.py

      - name: Check service logs
        if: failure()
        run: |
          docker-compose logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v