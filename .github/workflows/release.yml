---
name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  semantic-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      changelog: ${{ steps.semantic.outputs.new_release_notes }}
      released: ${{ steps.semantic.outputs.new_release_published }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "sed -i 's/version = \".*\"/version = \"${nextRelease.version}\"/' pyproject.toml"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["pyproject.toml", "CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run > release-output.txt 2>&1 || true
          
          if grep -q "The next release version is" release-output.txt; then
            VERSION=$(grep "The next release version is" release-output.txt | sed 's/.*The next release version is //')
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            
            # Run actual release
            npx semantic-release
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

  build-and-publish:
    runs-on: ubuntu-latest
    needs: semantic-version
    if: needs.semantic-version.outputs.released == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Publish to PyPI
        if: github.repository == 'Dragonatorul/FalkorDB-FastMCP-Proxy'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

  docker-release:
    runs-on: ubuntu-latest
    needs: [semantic-version, build-and-publish]
    if: needs.semantic-version.outputs.released == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.repository == 'Dragonatorul/FalkorDB-FastMCP-Proxy'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.semantic-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.semantic-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-documentation:
    runs-on: ubuntu-latest
    needs: [semantic-version, docker-release]
    if: needs.semantic-version.outputs.released == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with new version
        run: |
          VERSION=${{ needs.semantic-version.outputs.version }}
          sed -i "s/ghcr.io\/dragonatorul\/falkordb-fastmcp-proxy:[^[:space:]]*/ghcr.io\/dragonatorul\/falkordb-fastmcp-proxy:$VERSION/g" README.md
          sed -i "s/dragonatorul\/falkordb-fastmcp-proxy:[^[:space:]]*/dragonatorul\/falkordb-fastmcp-proxy:$VERSION/g" README.md

      - name: Update docker-compose.yml
        run: |
          VERSION=${{ needs.semantic-version.outputs.version }}
          sed -i "s/build: \./image: ghcr.io\/dragonatorul\/falkordb-fastmcp-proxy:$VERSION/" docker-compose.yml

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md docker-compose.yml
          git diff --staged --quiet || git commit -m "docs: update version references to ${{ needs.semantic-version.outputs.version }} [skip ci]"
          git push

  notify:
    runs-on: ubuntu-latest
    needs: [semantic-version, build-and-publish, docker-release, update-documentation]
    if: always() && needs.semantic-version.outputs.released == 'true'

    steps:
      - name: Create release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.semantic-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- PyPI: ${{ needs.build-and-publish.result == 'success' && '✅ Published' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: ${{ needs.docker-release.result == 'success' && '✅ Published' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docs: ${{ needs.update-documentation.result == 'success' && '✅ Updated' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/dragonatorul/falkordb-fastmcp-proxy:${{ needs.semantic-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`dragonatorul/falkordb-fastmcp-proxy:${{ needs.semantic-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY